name: FastAPI CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check-secrets:
    name: 🔍 Check Secrets Injection
    runs-on: ubuntu-latest

    steps:
      - name: Echo and Validate Secrets
        env:
          DB_USER: ${{ secrets.NEW_DB_USER }}
          DB_PASSWORD: ${{ secrets.NEW_DB_PASSWORD }}
          DB_NAME: ${{ secrets.NEW_DB_NAME }}
          DB_HOST: ${{ secrets.NEW_DB_HOST }}
          DB_PORT: ${{ secrets.NEW_DB_PORT }}
        run: |
          echo "🔍 Checking secrets..."
          echo "DB_USER = $DB_USER"
          echo "DB_HOST = $DB_HOST"
          echo "DB_PORT = $DB_PORT"

          if [ "$DB_USER" = "***" ] || [ -z "$DB_USER" ]; then
            echo "❌ DB_USER not properly injected"; exit 1
          fi

          echo "✅ Secrets are properly set."

  build-test-push:
    name: 🚀 Build, Test, and Push Docker Image
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🐘 Install PostgreSQL Client
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: 🐘 Test Database Connectivity
        env:
          DB_USER: ${{ secrets.NEW_DB_USER }}
          DB_PASSWORD: ${{ secrets.NEW_DB_PASSWORD }}
          DB_NAME: ${{ secrets.NEW_DB_NAME }}
          DB_HOST: ${{ secrets.NEW_DB_HOST }}
          DB_PORT: ${{ secrets.NEW_DB_PORT }}
        run: |
          export PGPASSWORD=$DB_PASSWORD
          psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c '\l'

      - name: 🛠 Run Alembic Migrations
        env:
          DB_USER: ${{ secrets.NEW_DB_USER }}
          DB_PASSWORD: ${{ secrets.NEW_DB_PASSWORD }}
          DB_NAME: ${{ secrets.NEW_DB_NAME }}
          DB_HOST: ${{ secrets.NEW_DB_HOST }}
          DB_PORT: ${{ secrets.NEW_DB_PORT }}
        run: |
          export SYNC_DATABASE_URL="postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}"
          echo "Running Alembic migrations..."
          alembic upgrade head

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🛠 Build Docker Image
        run: |
          docker build -t damolaajayi/fastapiapp:latest .

      - name: 📦 Push Docker Image
        run: |
          docker push damolaajayi/fastapiapp:latest
