name: FastAPI CI/CD with Docker Hub

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  debug-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Echo DB secrets
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          echo "üîç DB_USER = $DB_USER"
          echo "üîç DB_PASSWORD = $DB_PASSWORD"
          echo "üîç DB_NAME = $DB_NAME"
          echo "üîç DB_HOST = $DB_HOST"
          echo "üîç DB_PORT = $DB_PORT"

          if [ "$DB_USER" = "***" ]; then
            echo "‚ùå These values are not secrets, they are literally ***"
            exit 1
          fi

          if [ -z "$DB_USER" ]; then
            echo "‚ùå GitHub Secrets not injected"
            exit 1
          else
            echo "‚úÖ Secrets are available"
          fi
  build-test-push:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test Alembic DB connectivity
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          echo "üß™ Verifying DB secrets without printing them"

          if [ -z "$DB_USER" ] || [ "$DB_USER" = "***" ]; then
          echo "‚ùå DB_USER is not set properly"; exit 1
          fi

          if [ -z "$DB_HOST" ] || [ "$DB_HOST" = "***" ]; then
          echo "‚ùå DB_HOST is not set properly"; exit 1
          fi

          echo "‚úÖ Secrets are set"

          echo "üîß Installing PostgreSQL client"
          sudo apt-get update && sudo apt-get install -y postgresql-client

          echo "üêò Trying to connect to the database..."
          export PGPASSWORD=$DB_PASSWORD
          psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c '\l'

      - name: Try connecting to DB
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          apt-get update && apt-get install -y postgresql-client
          export PGPASSWORD=$DB_PASSWORD
          psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c '\l'

      - name: Run Alembic migrations
        env:
          DB_USER:  ${{ secrets.DB_USER }}
          DB_PASSWORD:  ${{ secrets.DB_PASSWORD }}
          DB_NAME:  ${{ secrets.DB_NAME }}
          DB_HOST:  ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          export SYNC_DATABASE_URL="postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}"
          echo "Running Alembic migration with DB URL pointing to ${DB_HOST}:${DB_PORT}"
          echo "DB_USER=$DB_USER"
          echo "DB_HOST=$DB_HOST"
          echo "DB_PORT=$DB_PORT"
          alembic upgrade head

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t damolaajayi/fastapiapp:latest .

      - name: Push Docker image
        run: |
          docker push damolaajayi/fastapiapp:latest
